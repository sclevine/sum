package encoding_test

import (
	"bytes"
	"testing"

	"github.com/sclevine/xsum/encoding"
)

func TestFileASN1DER(t *testing.T) {
	der, err := encoding.FileASN1DER(
		encoding.HashSHA256, []byte("aaa111"),
		07654, 03210,
		&encoding.Sys{
			UID:   uint32ptr(10),
			GID:   uint32ptr(20),
			Mtime: &encoding.Timespec{Sec: 40, Nsec: 50},
			Ctime: &encoding.Timespec{Sec: 60, Nsec: 70},
			Rdev:  uint64ptr(80),
			XattrHashes: []encoding.NamedHash{
				{Hash: []byte("ccc333"), Name: []byte("xattr1")},
				{Hash: []byte("bbb222"), Name: []byte("xattr2")},
			},
			XattrHashType: encoding.HashSHA256,
		},
	)
	if err != nil {
		t.Fatal(err)
	}
	if exp := []byte{
		0x30, 0x6c, // File
		0xa0, 0x0d, 0x30, 0x0b, // Hash Seq
		0x0a, 0x01, 0x04, // Hash Type
		0x04, 0x06, 0x61, 0x61, 0x61, 0x31, 0x31, 0x31, // Hash Bytes
		0xa1, 0x10, 0x30, 0x0e, // Mode
		0x03, 0x05, 0x00, 0x00, 0x00, 0x06, 0x88, // Mask Bits
		0x03, 0x05, 0x00, 0x00, 0x00, 0x06, 0x88, // Mode Bits
		0xa2, 0x03, 0x02, 0x01, 0x0a, // UID
		0xa3, 0x03, 0x02, 0x01, 0x14, // GID
		0xa5, 0x08, 0x30, 0x06, 0x02, 0x01, 0x28, 0x02, 0x01, 0x32, // mtime
		0xa6, 0x08, 0x30, 0x06, 0x02, 0x01, 0x3c, 0x02, 0x01, 0x46, // ctime
		0xa9, 0x2b, 0x30, 0x29, // xattr Hash Tree
		0x0a, 0x01, 0x04, // xattr Hash Type
		0x31, 0x24, // xattr Tree Set
		0x30, 0x10, // xattr2
		0x04, 0x06, 0x62, 0x62, 0x62, 0x32, 0x32, 0x32, // xattr2 Hash
		0x04, 0x06, 0x78, 0x61, 0x74, 0x74, 0x72, 0x32, // xattr2 Name
		0x30, 0x10, // xattr1
		0x04, 0x06, 0x63, 0x63, 0x63, 0x33, 0x33, 0x33, // xattr1 Hash
		0x04, 0x06, 0x78, 0x61, 0x74, 0x74, 0x72, 0x31, // xattr1 Name
	}; !bytes.Equal(der, exp) {
		t.Fatalf("encoding.FileASN1DER([test data]) = % x, expected % x", der, exp)
	}
}
func TestFileASN1DER_Empty(t *testing.T) {
	der, err := encoding.FileASN1DER(
		encoding.HashNone, nil,
		07654, 03210,
		nil,
	)
	if err != nil {
		t.Fatal(err)
	}
	if exp := []byte{
		0x30, 0x12, // File
		0xa1, 0x10, 0x30, 0x0e, // Mode
		0x03, 0x05, 0x00, 0x00, 0x00, 0x06, 0x88, // Mask Bits
		0x03, 0x05, 0x00, 0x00, 0x00, 0x06, 0x88, // Mode Bits
	}; !bytes.Equal(der, exp) {
		t.Fatalf("encoding.FileASN1DER([empty test data]) = % x, expected % x", der, exp)
	}
}

func uint32ptr(i uint32) *uint32 {
	return &i
}

func uint64ptr(i uint64) *uint64 {
	return &i
}
